/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/marketplace/{marketplace_id}/get_automotive_parts_compatibility_policies": {
    /** @description This method returns the eBay policies that define how to list automotive-parts-compatibility items in the categories of a specific marketplace.  <br><br>By default, this method returns the entire category tree for the specified marketplace. You can limit the size of the result set by using the <b>filter</b> query parameter to specify only the category IDs you want to review.  <p class="tablenote"><strong>Tip:</strong> This method can return a very large response payload and we strongly recommend you get the results from this call in a GZIP file by including the following HTTP header with your request:  <br><br><code>&nbsp;&nbsp;Accept-Encoding: application/gzip</code></p> */
    get: operations["getAutomotivePartsCompatibilityPolicies"];
  };
  "/marketplace/{marketplace_id}/get_item_condition_policies": {
    /** @description This method returns item condition metadata on one, multiple, or all eBay categories on an eBay marketplace. This metadata consists of the different item conditions (with IDs) that an eBay category supports, and a boolean to indicate if an eBay category requires an item condition. <br><br>The identifier of the eBay marketplace is passed in as a path parameter, and unless one or more eBay category IDs are passed in through the <b>filter</b> query parameter, this method will return metadata on every single category for the specified marketplace. If you only want to view item condition metadata for one eBay category or a select group of eBay categories, you can pass in up to 50 eBay category ID through the <b>filter</b> query parameter. <p class="tablenote"><strong>Important!:</strong> <b>Certified - Refurbished</b>-eligible sellers, and sellers who are eligible to list with the new values (EXCELLENT_REFURBISHED, VERY_GOOD_REFURBISHED, and GOOD_REFURBISHED) in category 9355, must use an OAuth token created with the <a href="/api-docs/static/oauth-authorization-code-grant.html" target="_blank">authorization code grant flow</a> and <b>https://api.ebay.com/oauth/api_scope/sell.inventory</b> scope in order to retrieve the refurbished conditions for the relevant categories. <br/><br/> These restricted item conditions will not be returned if an OAuth token created with the <a href="/api-docs/static/oauth-client-credentials-grant.html" target="_blank">client credentials grant flow</a> and <b>https://api.ebay.com/oauth/api_scope</b> scope is used, or if any seller is not eligible to list with that item condition. <br/><br/> See the <a href="/api-docs/static/oauth-scopes.html" target="_blank">Specifying OAuth scopes</a> topic for more information about specifying scopes.</p> <p class="tablenote"><strong>Tip:</strong> If you retrieve metadata on all eBay categories for a marketplace, the response payload can be quite large. For this reason, we suggest that you consider using the <b>Accept-Encoding</b> request header and set its value to <code>application/gzip</code>. By doing this, the response payload output will be compressed into a GZIP file. </p> */
    get: operations["getItemConditionPolicies"];
  };
  "/marketplace/{marketplace_id}/get_listing_structure_policies": {
    /** @description This method returns the eBay policies that define the allowed listing structures for the categories of a specific marketplace. The listing-structure policies currently pertain to whether or not you can list items with variations.  <br><br>By default, this method returns the entire category tree for the specified marketplace. You can limit the size of the result set by using the <b>filter</b> query parameter to specify only the category IDs you want to review.  <p class="tablenote"><strong>Tip:</strong> This method can return a very large response payload and we strongly recommend you get the results from this call in a GZIP file by including the following HTTP header with your request:  <br><br><code>&nbsp;&nbsp;Accept-Encoding: application/gzip</code></p> */
    get: operations["getListingStructurePolicies"];
  };
  "/marketplace/{marketplace_id}/get_negotiated_price_policies": {
    /** @description This method returns the eBay policies that define the supported negotiated price features (like "best offer") for the categories of a specific marketplace.  <br><br>By default, this method returns the entire category tree for the specified marketplace. You can limit the size of the result set by using the <b>filter</b> query parameter to specify only the category IDs you want to review.  <p class="tablenote"><strong>Tip:</strong> This method can return a very large response payload and we strongly recommend you get the results from this call in a GZIP file by including the following HTTP header with your request:  <br><br><code>&nbsp;&nbsp;Accept-Encoding: application/gzip</code></p> */
    get: operations["getNegotiatedPricePolicies"];
  };
  "/marketplace/{marketplace_id}/get_product_adoption_policies": {
    /** @description This method retrieves a list of leaf categories for a marketplace and identifies the categories that require items to have an eBay product ID value in order to be listed in those categories. An eBay product ID value (known as an "ePID") is a value that references a specific product in the eBay Catalog.  <p class="tablenote"><strong>Important:</strong> eBay catalog product adoption is not currently required for any product categories. If product adoption requirements change, they will be noted here.</p> <p>Use the <b>marketplace_id</b> path parameter to specify the marketplace you want to review and use the <b>filter</b> query parameter to limit the categories returned in the response.</p>  <p class="tablenote"><strong>Tip:</strong> This method can return a very large response payload and we strongly recommend you get the results from this call in a GZIP file by including the following HTTP header with your request:  <br><br><code>&nbsp;&nbsp;Accept-Encoding: application/gzip</code></p> */
    get: operations["getProductAdoptionPolicies"];
  };
  "/marketplace/{marketplace_id}/get_return_policies": {
    /** @description This method returns the eBay policies that define whether or not you must include a return policy for the items you list in the categories of a specific marketplace, plus the guidelines for creating domestic and international return policies in the different eBay categories.  <br><br>By default, this method returns the entire category tree for the specified marketplace. You can limit the size of the result set by using the <b>filter</b> query parameter to specify only the category IDs you want to review.  <p class="tablenote"><strong>Tip:</strong> This method can return a very large response payload and we strongly recommend you get the results from this call in a GZIP file by including the following HTTP header with your request:  <br><br><code>&nbsp;&nbsp;Accept-Encoding: application/gzip</code></p> */
    get: operations["getReturnPolicies"];
  };
  "/country/{countryCode}/sales_tax_jurisdiction": {
    /** @description This method retrieves all the sales tax jurisdictions for the country that you specify in the <b>countryCode</b> path parameter. Countries with valid sales tax jurisdictions are Canada and the US.  <br><br>The response from this call tells you the jurisdictions for which a seller can configure tax tables. Although setting up tax tables is optional, you can use the <b>createOrReplaceSalesTax</b> in the <b>Account API</b> call to configure the tax tables for the jurisdictions you sell to. */
    get: operations["getSalesTaxJurisdictions"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AutomotivePartsCompatibilityPolicy: {
      /** @description The category ID to which the automotive-parts-compatibility policies apply. */
      categoryId?: string;
      /** @description A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes. */
      categoryTreeId?: string;
      /** @description Indicates whether the category supports parts compatibility by either <code>ASSEMBLY</code> or by <code>SPECIFICATION</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:CompatibilityTypeEnum'>eBay API documentation</a> */
      compatibilityBasedOn?: string;
      /** @description Indicates the compatibility classification of the part based on high-level vehicle types. */
      compatibleVehicleTypes?: (string)[];
      /**
       * Format: int32 
       * @description Specifies the maximum number of compatible vehicle-applications allowed per item.
       */
      maxNumberOfCompatibleVehicles?: number;
    };
    AutomotivePartsCompatibilityPolicyResponse: {
      /** @description A list of category IDs and the automotive-parts-compatibility policies for each of the listed categories. */
      automotivePartsCompatibilityPolicies?: (components["schemas"]["AutomotivePartsCompatibilityPolicy"])[];
      /** @description A list of the warnings that were generated as a result of the request. This field is not returned if no warnings were generated by the request. */
      warnings?: (components["schemas"]["Error"])[];
    };
    /** @description A container that defines the elements of error and warning messages. */
    Error: {
      /** @description The category type for this error or warning. It takes an ErrorCategory object which can have one of three values:<ul><li><code>Application</code>: Indicates an exception or error occurred in the application code or at runtime. Examples include catching an exception in a service's business logic, system failures, or request errors from a dependency.</li><li><code>Business</code>: Used when your service or a dependent service refused to continue processing on the resource because of a business rule violation such as "Seller does not ship item to Antarctica" or "Buyer ineligible to purchase an alcoholic item". Business errors are not syntactical input errors.</li><li><code>Request</code>: Used when there is anything wrong with the request, such as authentication, syntactical errors, rate limiting or missing headers, bad HTTP header values, and so on.</li></ul> */
      category?: string;
      /** @description Name of the domain containing the service or application. */
      domain?: string;
      /**
       * Format: int32 
       * @description A positive integer that uniquely identifies the specific error condition that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.
       */
      errorId?: number;
      /** @description Identifies specific request elements associated with the error, if any. inputRefId's response is format specific. For JSON, use <i>JSONPath</i> notation. */
      inputRefIds?: (string)[];
      /** @description An expanded version of message that should be around 100-200 characters long, but is not required to be such. */
      longMessage?: string;
      /** @description An end user and app developer friendly device agnostic message. It explains what the error or warning is, and how to fix it (in a general sense). Its value is at most 50 characters long. If applicable, the value is localized in the end user's requested locale. */
      message?: string;
      /** @description Identifies specific response elements associated with the error, if any. Path format is the same as <code>inputRefId</code>. */
      outputRefIds?: (string)[];
      /** @description This optional complex field type contains a list of one or more context-specific <code>ErrorParameter</code> objects, with each item in the list entry being a parameter (or input field name) that caused an error condition. Each <code>ErrorParameter</code> object consists of two fields, a <code>name</code> and a <code>value</code>. */
      parameters?: (components["schemas"]["ErrorParameter"])[];
      /** @description Name of the domain's subsystem or subdivision. For example, checkout is a subdomain in the buying domain. */
      subdomain?: string;
    };
    /** @description Container for a error parameter. */
    ErrorParameter: {
      /** @description Name of the entity that threw the error. */
      name?: string;
      /** @description A description of the error. */
      value?: string;
    };
    /** @description This type returns a list of properties (and their associated values) that are excluded from requiring an ePID value (from the eBay Catalog) for items that are listed in the associated category. */
    Exclusion: {
      /** @description A list of brands that are excluded from requiring a link to the eBay Catalog for the associated <b>categoryId</b>.  <br><br>If <b>productRequired</b> is set to <code>true</code>, items that are of a brand returned in this field are excluded from the need to specify a value for the ePID field in their item description in order to be listed in the associated category. */
      brands?: (string)[];
    };
    /** @description <span class="tablenote"><b>Note: </b>In all eBay marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', and not 'Manufacturer Refurbished'. To list an item as 'Certified Refurbished', a seller must be pre-qualified by eBay for this feature. Any seller who is not eligible for this feature will be blocked if they try to create a new listing or revise an existing listing with this item condition. Any active listings on any eBay marketplace that had 'Manufacturer Refurbished' as the item condition should have been automatically updated by eBay to the 'Seller Refurbished' item condition (Condition ID 2500). <br><br> Any seller that is interested in eligibility requirements to list with 'Certified Refurbished' should see the <a href="https://pages.ebay.com/seller-center/listing-and-marketing/certified-refurbished-program.html" target="_blank">Certified refurbished program</a> page in Seller Center. </span> */
    ItemCondition: {
      /** @description The human-readable label for the condition (e.g., "New"). This value is typically localized for each site.  <br><br>Note that the display name can vary by category. For example, the description for condition ID <code>1000</code> could be called "New: with Tags" in one category and "Brand New" in another. For details on condition IDs and descriptions, see <a href='/api-docs/sell/static/metadata/condition-id-values.html'>Item condition ID and name values</a>. */
      conditionDescription?: string;
      /** @description The ID value of the selected item condition. For information on the supported condition ID values, see <a href='/api-docs/sell/static/metadata/condition-id-values.html'>Item condition ID and name values</a>. */
      conditionId?: string;
      /** @description The value returned in this field indicates if there are any usage restrictions or requirements for the corresponding item condition in the corresponding category.<br /><br /><span class="tablenote"><b>Note:</b> Currently, the only supported value is 'RESTRICTED', and this field will only be returned for the following conditions: 2000, 2010, 2020, 2030. Sellers must be pre-approved to use any of these item conditions.</span> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:UsageEnum'>eBay API documentation</a> */
      usage?: string;
    };
    ItemConditionPolicy: {
      /** @description The category ID to which the item-condition policy applies. */
      categoryId?: string;
      /** @description A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes. */
      categoryTreeId?: string;
      /** @description This flag denotes whether or not you must list the item condition in a listing for the specified category. If set to <code>true</code>, you must specify an item condition for the associated category. */
      itemConditionRequired?: boolean;
      /** @description The item-condition values allowed in the category.<br /><br /><span class="tablenote"><b>Note: </b>In all eBay marketplaces, Condition ID 2000 now maps to an item condition of 'Certified Refurbished', and not 'Manufacturer Refurbished'. To list an item as 'Certified Refurbished', a seller must be pre-qualified by eBay for this feature. Any seller who is not eligible for this feature will be blocked if they try to create a new listing or revise an existing listing with this item condition.<br><br> Any seller that is interested in eligibility requirements to list with 'Certified Refurbished' should see the <a href="https://pages.ebay.com/seller-center/listing-and-marketing/certified-refurbished-program.html" target="_blank">Certified refurbished program</a> page in Seller Center. </span><br /><br /><span class="tablenote"><b>Note:</b> For the Cell Phones & Smartphones category (9355), the <code>SELLER_REFURBISHED</code> condition is being deprecated. Sellers trying to list an item in this category (9355) with the condition <code>SELLER_REFURBISHED</code> will be blocked. Starting September 1, 2021, existing listings for this category (9355) with this item condition will be ended by eBay but three new additional refurbished items conditions will be available: <code>EXCELLENT_REFURBISHED</code>, <code>VERY_GOOD_REFURBISHED</code>, and <code>GOOD_REFURBISHED</code>. To be eligible to list with these three item conditions, sellers will have to go through an application process. See <a href="https://www.ebay.com/help/selling/listings/creating-managing-listings/item-conditions-category?id=4765#section4"  target="_blank">Cameras & Photo, Cell Phones & Accessories...</a> for details.</span> */
      itemConditions?: (components["schemas"]["ItemCondition"])[];
    };
    ItemConditionPolicyResponse: {
      /** @description A list of category IDs and the policies for how to indicate an item's condition in each of the listed categories. */
      itemConditionPolicies?: (components["schemas"]["ItemConditionPolicy"])[];
      /** @description A list of the warnings that were generated as a result of the request. This field is not returned if no warnings were generated by the request. */
      warnings?: (components["schemas"]["Error"])[];
    };
    ListingStructurePolicy: {
      /** @description The category ID to which the listing-structure policy applies. */
      categoryId?: string;
      /** @description A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes. */
      categoryTreeId?: string;
      /** @description This flag denotes whether or not the associated category supports listings with item variations. If set to <code>true</code>, the category does support item variations. */
      variationsSupported?: boolean;
    };
    ListingStructurePolicyResponse: {
      /** @description Returns a list of category IDs plus a flag indicating whether or not each listed category supports item variations. */
      listingStructurePolicies?: (components["schemas"]["ListingStructurePolicy"])[];
      /** @description A list of the warnings that were generated as a result of the request. This field is not returned if no warnings were generated by the request. */
      warnings?: (components["schemas"]["Error"])[];
    };
    NegotiatedPricePolicy: {
      /** @description This flag denotes whether or not the category supports the setting of a price at which best offers are automatically accepted. If set to <code>true</code>, the category does support the setting of an automatic price for best-offers. */
      bestOfferAutoAcceptEnabled?: boolean;
      /** @description This flag denotes whether or not the category supports the setting of an auto-decline price for best offers. If set to <code>true</code>, the category does support the setting of an automatic-decline price for best-offers. */
      bestOfferAutoDeclineEnabled?: boolean;
      /** @description This flag denotes whether or not the category supports the setting for an automatic counter-offer on best offers. If set to <code>true</code>, the category does support the setting of an automatic counter-offer price for best-offers. */
      bestOfferCounterEnabled?: boolean;
      /** @description The category ID to which the negotiated-price policies apply. */
      categoryId?: string;
      /** @description A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes. */
      categoryTreeId?: string;
    };
    NegotiatedPricePolicyResponse: {
      /** @description A list of category IDs and the policies related to negotiated-price items for each of the listed categories. */
      negotiatedPricePolicies?: (components["schemas"]["NegotiatedPricePolicy"])[];
      /** @description A list of the warnings that were generated as a result of the request. This field is not returned if no warnings were generated by the request. */
      warnings?: (components["schemas"]["Error"])[];
    };
    /** @description This complex type returns a category ID and a flag that indicates whether or not items listed in that category require the declaration of an ePID value, which links the item to the eBay Catalog. The type also lists any items that are excepted from the requirement to included an ePID value. */
    ProductAdoptionPolicy: {
      /** @description The category ID to which the listing policies apply. */
      categoryId?: string;
      /** @description A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes. */
      categoryTreeId?: string;
      /** @description A list of brands that are excluded from the ePID product-adoption requirements for the related category ID. */
      exclusion?: components["schemas"]["Exclusion"];
      /** @description If set to <code>true</code>, items must include an ePID value in their item description before they can be listed in the category identified by the associated <b>categoryId</b>. In contrast, a value of <code>false</code> indicates that items listed in the associated category do not require ePID values.  <br><br><span class="tablenote"><b>Important!</b> It is possible for a <b>productAdoptionPolicies</b> container to not contain this <b>productRequired</b> field. This occurs if the eBay category is not part of the PBSE Phase 1 or Phase 2 mandate. In these scenarios, please treat the response the same as if this field were present and contained a value of <code>false</code>.</span> */
      productRequired?: boolean;
    };
    /** @description This is the response object returned by a call to getProductAdoptionPolicies. */
    ProductAdoptionPolicyResponse: {
      /** @description A list of category IDs from the marketplace specified in the request where each returned element represents a leaf node in the category tree. Each element in the list contains the policies governing whether or not items listed in that category must include an ePID value (which links the item to the eBay Catalog). */
      productAdoptionPolicies?: (components["schemas"]["ProductAdoptionPolicy"])[];
      /** @description A list of the warnings that were generated as a result of the request. This field is not returned if no warnings were generated by the request. */
      warnings?: (components["schemas"]["Error"])[];
    };
    ReturnPolicy: {
      /** @description The category ID to which the return policies apply. */
      categoryId?: string;
      /** @description A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes. */
      categoryTreeId?: string;
      /** @description This complex type defines the category policies related to domestic item returns. */
      domestic?: components["schemas"]["ReturnPolicyDetails"];
      /** @description This complex type defines the category policies related to international item returns. */
      international?: components["schemas"]["ReturnPolicyDetails"];
      /** @description If set to <code>true</code>, this flag indicates that you must specify a return policy for items listed in the associated category.  <br><br>Note that not accepting returns (setting <b>returnsAcceptedEnabled</b> to <code>false</code>) is a valid return policy. */
      required?: boolean;
    };
    /** @description This container defines the category policies that relate to domestic and international return policies (the return shipping is made via a domestic or an international shipping service, respectively). */
    ReturnPolicyDetails: {
      /** @description If set to <code>true</code>, this flag indicates you can supply a detailed return policy description within your return policy (for example, by populating the <b>returnInstructions</b> field in the Account API's <b>createReturnPolicy</b>). User-supplied return policy details are allowed only in the DE, ES, FR, and IT marketplaces. */
      policyDescriptionEnabled?: boolean;
      /** @description A list of refund methods allowed for the associated category. */
      refundMethods?: (string)[];
      /** @description A list of return methods allowed for the associated category. */
      returnMethods?: (string)[];
      /** @description A list of return periods allowed for the associated category.  <br><br>Note that different APIs require you to enter the return period in different ways. For example, the Account API uses the complex <b>TimeDuration</b> type, which takes two values (a <b>unit</b> and a <b>value</b>), whereas the Trading API takes a single value (such as <code>Days_30</code>). */
      returnPeriods?: (components["schemas"]["TimeDuration"])[];
      /** @description If set to <code>true</code>, this flag indicates the seller can configure how they handle domestic returns. */
      returnsAcceptanceEnabled?: boolean;
      /** @description A list of allowed values for who pays for the return shipping cost.  <br><br>Note that for SNAD returns, the seller is always responsible for the return shipping cost. */
      returnShippingCostPayers?: (string)[];
    };
    ReturnPolicyResponse: {
      /** @description A list of elements, where each contains a category ID and a flag that indicates whether or not listings in that category require a return policy. */
      returnPolicies?: (components["schemas"]["ReturnPolicy"])[];
      /** @description A list of the warnings that were generated as a result of the request. This field is not returned if no warnings were generated by the request. */
      warnings?: (components["schemas"]["Error"])[];
    };
    /** @description A unique ID for a sales tax jurisdiction. */
    SalesTaxJurisdiction: {
      /** @description The unique ID for a sales tax jurisdiction. */
      salesTaxJurisdictionId?: string;
    };
    /** @description This complex type contains a list of sales tax jurisdictions. */
    SalesTaxJurisdictions: {
      /** @description A list of sales tax jurisdictions. */
      salesTaxJurisdictions?: (components["schemas"]["SalesTaxJurisdiction"])[];
    };
    /** @description A complex type that specifies a period of time using a specified time-measurement unit. */
    TimeDuration: {
      /** @description A time-measurement unit that specifies a singular period of time.  <br><br>A span of time is defined when you apply the value specified in the <b>value</b> field to the value specified for <b>unit</b>.  <br><br>Time-measurement units can be YEAR, MONTH, DAY, and so on. See <b>TimeDurationUnitEnum</b> for a complete list of possible time-measurement units. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/ba:TimeDurationUnitEnum'>eBay API documentation</a> */
      unit?: string;
      /**
       * Format: int32 
       * @description An integer that represents an amount of time, as measured by the time-measurement unit specified in the <b>unit</b> field.
       */
      value?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** @description This method returns the eBay policies that define how to list automotive-parts-compatibility items in the categories of a specific marketplace.  <br><br>By default, this method returns the entire category tree for the specified marketplace. You can limit the size of the result set by using the <b>filter</b> query parameter to specify only the category IDs you want to review.  <p class="tablenote"><strong>Tip:</strong> This method can return a very large response payload and we strongly recommend you get the results from this call in a GZIP file by including the following HTTP header with your request:  <br><br><code>&nbsp;&nbsp;Accept-Encoding: application/gzip</code></p> */
  getAutomotivePartsCompatibilityPolicies: {
    parameters: {
      query?: {
        /** @description This query parameter limits the response by returning policy information for only the selected sections of the category tree. Supply <b>categoryId</b> values for the sections of the tree you want returned.  <br><br>When you specify a <b>categoryId</b> value, the returned category tree includes the policies for that parent node, plus the policies for any leaf nodes below that parent node.  <br><br>The parameter takes a list of <b>categoryId</b> values and you can specify up to 50 separate category IDs. Separate multiple values with a pipe character ('|'). If you specify more than 50 <code>categoryId</code> values, eBay returns the policies for the first 50 IDs and a warning that not all categories were returned.  <br><br><b>Example:</b> <code>filter=categoryIds:{100|101|102}</code>  <br><br>Note that you must URL-encode the parameter list, which results in the following filter for the above example: <br><br> &nbsp;&nbsp;<code>filter=categoryIds%3A%7B100%7C101%7C102%7D</code> */
        filter?: string;
      };
      path: {
        /** @description This path parameter specifies the eBay marketplace for which policy information is retrieved.  <br><br><b>Note:</b> Only the following eBay marketplaces support automotive parts compatibility: <ul> <li>EBAY_US</li> <li>EBAY_AU</li> <li>EBAY_CA</li> <li>EBAY_DE</li> <li>EBAY_ES</li> <li>EBAY_FR</li> <li>EBAY_GB</li> <li>EBAY_IT</li><ul> */
        marketplace_id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["AutomotivePartsCompatibilityPolicyResponse"];
        };
      };
      /** @description No content */
      204: never;
      /** @description Bad Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method returns item condition metadata on one, multiple, or all eBay categories on an eBay marketplace. This metadata consists of the different item conditions (with IDs) that an eBay category supports, and a boolean to indicate if an eBay category requires an item condition. <br><br>The identifier of the eBay marketplace is passed in as a path parameter, and unless one or more eBay category IDs are passed in through the <b>filter</b> query parameter, this method will return metadata on every single category for the specified marketplace. If you only want to view item condition metadata for one eBay category or a select group of eBay categories, you can pass in up to 50 eBay category ID through the <b>filter</b> query parameter. <p class="tablenote"><strong>Important!:</strong> <b>Certified - Refurbished</b>-eligible sellers, and sellers who are eligible to list with the new values (EXCELLENT_REFURBISHED, VERY_GOOD_REFURBISHED, and GOOD_REFURBISHED) in category 9355, must use an OAuth token created with the <a href="/api-docs/static/oauth-authorization-code-grant.html" target="_blank">authorization code grant flow</a> and <b>https://api.ebay.com/oauth/api_scope/sell.inventory</b> scope in order to retrieve the refurbished conditions for the relevant categories. <br/><br/> These restricted item conditions will not be returned if an OAuth token created with the <a href="/api-docs/static/oauth-client-credentials-grant.html" target="_blank">client credentials grant flow</a> and <b>https://api.ebay.com/oauth/api_scope</b> scope is used, or if any seller is not eligible to list with that item condition. <br/><br/> See the <a href="/api-docs/static/oauth-scopes.html" target="_blank">Specifying OAuth scopes</a> topic for more information about specifying scopes.</p> <p class="tablenote"><strong>Tip:</strong> If you retrieve metadata on all eBay categories for a marketplace, the response payload can be quite large. For this reason, we suggest that you consider using the <b>Accept-Encoding</b> request header and set its value to <code>application/gzip</code>. By doing this, the response payload output will be compressed into a GZIP file. </p> */
  getItemConditionPolicies: {
    parameters: {
      query?: {
        /** @description This query parameter limits the response by returning policy information for only the selected sections of the category tree. Supply <b>categoryId</b> values for the sections of the tree you want returned.  <br><br>When you specify a <b>categoryId</b> value, the returned category tree includes the policies for that parent node, plus the policies for any leaf nodes below that parent node.  <br><br>The parameter takes a list of <b>categoryId</b> values and you can specify up to 50 separate category IDs. Separate multiple values with a pipe character ('|'). If you specify more than 50 <code>categoryId</code> values, eBay returns the policies for the first 50 IDs and a warning that not all categories were returned.  <br><br><b>Example:</b> <code>filter=categoryIds:{100|101|102}</code>  <br><br>Note that you must URL-encode the parameter list, which results in the following filter for the above example: <br><br> &nbsp;&nbsp;<code>filter=categoryIds%3A%7B100%7C101%7C102%7D</code> */
        filter?: string;
      };
      path: {
        /** @description This path parameter specifies the eBay marketplace for which policy information is retrieved. See the following page for a list of valid eBay marketplace IDs: <a href="/api-docs/static/rest-request-components.html#marketpl" target="_blank">Request components</a>. */
        marketplace_id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["ItemConditionPolicyResponse"];
        };
      };
      /** @description No content */
      204: never;
      /** @description Bad Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method returns the eBay policies that define the allowed listing structures for the categories of a specific marketplace. The listing-structure policies currently pertain to whether or not you can list items with variations.  <br><br>By default, this method returns the entire category tree for the specified marketplace. You can limit the size of the result set by using the <b>filter</b> query parameter to specify only the category IDs you want to review.  <p class="tablenote"><strong>Tip:</strong> This method can return a very large response payload and we strongly recommend you get the results from this call in a GZIP file by including the following HTTP header with your request:  <br><br><code>&nbsp;&nbsp;Accept-Encoding: application/gzip</code></p> */
  getListingStructurePolicies: {
    parameters: {
      query?: {
        /** @description This query parameter limits the response by returning policy information for only the selected sections of the category tree. Supply <b>categoryId</b> values for the sections of the tree you want returned.  <br><br>When you specify a <b>categoryId</b> value, the returned category tree includes the policies for that parent node, plus the policies for any leaf nodes below that parent node.  <br><br>The parameter takes a list of <b>categoryId</b> values and you can specify up to 50 separate category IDs. Separate multiple values with a pipe character ('|'). If you specify more than 50 <code>categoryId</code> values, eBay returns the policies for the first 50 IDs and a warning that not all categories were returned.  <br><br><b>Example:</b> <code>filter=categoryIds:{100|101|102}</code>  <br><br>Note that you must URL-encode the parameter list, which results in the following filter for the above example: <br><br> &nbsp;&nbsp;<code>filter=categoryIds%3A%7B100%7C101%7C102%7D</code> */
        filter?: string;
      };
      path: {
        /** @description This path parameter specifies the eBay marketplace for which policy information is retrieved. See the following page for a list of valid eBay marketplace IDs: <a href="/api-docs/static/rest-request-components.html#marketpl" target="_blank">Request components</a>. */
        marketplace_id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["ListingStructurePolicyResponse"];
        };
      };
      /** @description No content */
      204: never;
      /** @description Bad Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method returns the eBay policies that define the supported negotiated price features (like "best offer") for the categories of a specific marketplace.  <br><br>By default, this method returns the entire category tree for the specified marketplace. You can limit the size of the result set by using the <b>filter</b> query parameter to specify only the category IDs you want to review.  <p class="tablenote"><strong>Tip:</strong> This method can return a very large response payload and we strongly recommend you get the results from this call in a GZIP file by including the following HTTP header with your request:  <br><br><code>&nbsp;&nbsp;Accept-Encoding: application/gzip</code></p> */
  getNegotiatedPricePolicies: {
    parameters: {
      query?: {
        /** @description This query parameter limits the response by returning policy information for only the selected sections of the category tree. Supply <b>categoryId</b> values for the sections of the tree you want returned.  <br><br>When you specify a <b>categoryId</b> value, the returned category tree includes the policies for that parent node, plus the policies for any leaf nodes below that parent node.  <br><br>The parameter takes a list of <b>categoryId</b> values and you can specify up to 50 separate category IDs. Separate multiple values with a pipe character ('|'). If you specify more than 50 <code>categoryId</code> values, eBay returns the policies for the first 50 IDs and a warning that not all categories were returned.  <br><br><b>Example:</b> <code>filter=categoryIds:{100|101|102}</code>  <br><br>Note that you must URL-encode the parameter list, which results in the following filter for the above example: <br><br> &nbsp;&nbsp;<code>filter=categoryIds%3A%7B100%7C101%7C102%7D</code> */
        filter?: string;
      };
      path: {
        /** @description This path parameter specifies the eBay marketplace for which policy information is retrieved. See the following page for a list of valid eBay marketplace IDs: <a href="/api-docs/static/rest-request-components.html#marketpl" target="_blank">Request components</a>. */
        marketplace_id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["NegotiatedPricePolicyResponse"];
        };
      };
      /** @description No content */
      204: never;
      /** @description Bad Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method retrieves a list of leaf categories for a marketplace and identifies the categories that require items to have an eBay product ID value in order to be listed in those categories. An eBay product ID value (known as an "ePID") is a value that references a specific product in the eBay Catalog.  <p class="tablenote"><strong>Important:</strong> eBay catalog product adoption is not currently required for any product categories. If product adoption requirements change, they will be noted here.</p> <p>Use the <b>marketplace_id</b> path parameter to specify the marketplace you want to review and use the <b>filter</b> query parameter to limit the categories returned in the response.</p>  <p class="tablenote"><strong>Tip:</strong> This method can return a very large response payload and we strongly recommend you get the results from this call in a GZIP file by including the following HTTP header with your request:  <br><br><code>&nbsp;&nbsp;Accept-Encoding: application/gzip</code></p> */
  getProductAdoptionPolicies: {
    parameters: {
      query?: {
        /** @description This query parameter limits the response by returning policy information for only the selected sections of the category tree. Supply <b>categoryId</b> values for the sections of the tree you want returned.  <br><br>When you specify a <b>categoryId</b> value, the returned category tree includes the policies for that parent node, plus the policies for any leaf nodes below that parent node.  <br><br>The parameter takes a list of <b>categoryId</b> values and you can specify up to 50 separate category IDs. Separate multiple values with a pipe character ('|'). If you specify more than 50 <code>categoryId</code> values, eBay returns the policies for the first 50 IDs and a warning that not all categories were returned.  <br><br><b>Example:</b> <code>filter=categoryIds:{100|101|102}</code>  <br><br>Note that you must URL-encode the parameter list, which results in the following filter for the above example: <br><br> &nbsp;&nbsp;<code>filter=categoryIds%3A%7B100%7C101%7C102%7D</code> */
        filter?: string;
      };
      path: {
        /** @description This path parameter specifies the eBay marketplace for which policy information is retrieved. See the following page for a list of valid eBay marketplace IDs: <a href="/api-docs/static/rest-request-components.html#marketpl" target="_blank">Request components</a>. */
        marketplace_id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["ProductAdoptionPolicyResponse"];
        };
      };
      /** @description No content */
      204: never;
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method returns the eBay policies that define whether or not you must include a return policy for the items you list in the categories of a specific marketplace, plus the guidelines for creating domestic and international return policies in the different eBay categories.  <br><br>By default, this method returns the entire category tree for the specified marketplace. You can limit the size of the result set by using the <b>filter</b> query parameter to specify only the category IDs you want to review.  <p class="tablenote"><strong>Tip:</strong> This method can return a very large response payload and we strongly recommend you get the results from this call in a GZIP file by including the following HTTP header with your request:  <br><br><code>&nbsp;&nbsp;Accept-Encoding: application/gzip</code></p> */
  getReturnPolicies: {
    parameters: {
      query?: {
        /** @description This query parameter limits the response by returning policy information for only the selected sections of the category tree. Supply <b>categoryId</b> values for the sections of the tree you want returned.  <br><br>When you specify a <b>categoryId</b> value, the returned category tree includes the policies for that parent node, plus the policies for any leaf nodes below that parent node.  <br><br>The parameter takes a list of <b>categoryId</b> values and you can specify up to 50 separate category IDs. Separate multiple values with a pipe character ('|'). If you specify more than 50 <code>categoryId</code> values, eBay returns the policies for the first 50 IDs and a warning that not all categories were returned.  <br><br><b>Example:</b> <code>filter=categoryIds:{100|101|102}</code>  <br><br>Note that you must URL-encode the parameter list, which results in the following filter for the above example: <br><br> &nbsp;&nbsp;<code>filter=categoryIds%3A%7B100%7C101%7C102%7D</code> */
        filter?: string;
      };
      path: {
        /** @description This path parameter specifies the eBay marketplace for which policy information is retrieved. See the following page for a list of valid eBay marketplace IDs: <a href="/api-docs/static/rest-request-components.html#marketpl" target="_blank">Request components</a>. */
        marketplace_id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["ReturnPolicyResponse"];
        };
      };
      /** @description No content */
      204: never;
      /** @description Bad Request */
      400: never;
      /** @description Not found */
      404: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
  /** @description This method retrieves all the sales tax jurisdictions for the country that you specify in the <b>countryCode</b> path parameter. Countries with valid sales tax jurisdictions are Canada and the US.  <br><br>The response from this call tells you the jurisdictions for which a seller can configure tax tables. Although setting up tax tables is optional, you can use the <b>createOrReplaceSalesTax</b> in the <b>Account API</b> call to configure the tax tables for the jurisdictions you sell to. */
  getSalesTaxJurisdictions: {
    parameters: {
      path: {
        /** @description This path parameter specifies the two-letter <a href="https://www.iso.org/iso-3166-country-codes.html" title="https://www.iso.org" target="_blank">ISO 3166</a> country code for the country whose jurisdictions you want to retrieve. eBay provides sales tax jurisdiction information for Canada and the United States.Valid values for this path parameter are <code>CA</code> and <code>US</code>. */
        countryCode: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["SalesTaxJurisdictions"];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
      /** @description Internal Server Error */
      500: never;
    };
  };
}
